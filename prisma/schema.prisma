// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// Next Auth --------------------------------------------------------------------------------------

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Role {
  superadmin
  admin
  curator
  user
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          Role      @default(user)
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Tech radar -------------------------------------------------------------------------------------

model Professional {
  id               String      @id @default(uuid())
  userId           String      @unique
  creationDateTime DateTime    @default(now())
  techSkills       TechSkill[]
  active           Boolean     @default(true)

  @@index([userId])
}

model TechSkill {
  id                 String         @id @default(uuid())
  creationDateTime   DateTime       @default(now())
  lastUpdateDateTime DateTime       @default(now()) @updatedAt
  current            Boolean        @default(true)
  level              TechSkillLevel @relation(fields: [levelId], references: [id])
  levelId            String
  technology         Technology     @relation(fields: [technologyId], references: [id])
  technologyId       String
  professional       Professional   @relation(fields: [professionalId], references: [id])
  professionalId     String
}

model TechSkillLevel {
  id         String      @id @default(uuid())
  name       String      @unique
  weight     Int
  techSkills TechSkill[]
  active     Boolean     @default(true)
}

model Technology {
  id          String               @id @default(uuid())
  name        String
  description String
  techSkills  TechSkill[]
  categories  TechnologyCategory[]
  active      Boolean              @default(true)
}

model TechnologyCategory {
  id           String       @id @default(uuid())
  name         String
  technologies Technology[]
  active       Boolean      @default(true)
}
